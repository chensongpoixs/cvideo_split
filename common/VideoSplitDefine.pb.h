// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoSplitDefine.proto

#ifndef PROTOBUF_INCLUDED_VideoSplitDefine_2eproto
#define PROTOBUF_INCLUDED_VideoSplitDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "EnumDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VideoSplitDefine_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_VideoSplitDefine_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class CameraGroup;
class CameraGroupDefaultTypeInternal;
extern CameraGroupDefaultTypeInternal _CameraGroup_default_instance_;
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class OsdInfo;
class OsdInfoDefaultTypeInternal;
extern OsdInfoDefaultTypeInternal _OsdInfo_default_instance_;
class PageInfo;
class PageInfoDefaultTypeInternal;
extern PageInfoDefaultTypeInternal _PageInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::CameraGroup* Arena::CreateMaybeMessage<::CameraGroup>(Arena*);
template<> ::CameraInfo* Arena::CreateMaybeMessage<::CameraInfo>(Arena*);
template<> ::OsdInfo* Arena::CreateMaybeMessage<::OsdInfo>(Arena*);
template<> ::PageInfo* Arena::CreateMaybeMessage<::PageInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CameraInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(nullptr);
  }

  CameraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string camera_name = 3;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 3;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  #if LANG_CXX11
  void set_camera_name(::std::string&& value);
  #endif
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // optional string ip = 4;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string address = 5;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string url = 7;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 7;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional uint32 camera_id = 2;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 2;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // optional uint32 port = 6;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional .ECameraStatusType state = 8;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::ECameraStatusType state() const;
  void set_state(::ECameraStatusType value);

  // @@protoc_insertion_point(class_scope:CameraInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 camera_id_;
  ::google::protobuf::uint32 port_;
  int state_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class CameraGroup final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CameraGroup) */ {
 public:
  CameraGroup();
  virtual ~CameraGroup();

  CameraGroup(const CameraGroup& from);

  inline CameraGroup& operator=(const CameraGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraGroup(CameraGroup&& from) noexcept
    : CameraGroup() {
    *this = ::std::move(from);
  }

  inline CameraGroup& operator=(CameraGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CameraGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraGroup* internal_default_instance() {
    return reinterpret_cast<const CameraGroup*>(
               &_CameraGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraGroup* other);
  friend void swap(CameraGroup& a, CameraGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraGroup* New() const final {
    return CreateMaybeMessage<CameraGroup>(nullptr);
  }

  CameraGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CameraGroup& from);
  void MergeFrom(const CameraGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional uint32 camera_id = 2;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 2;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // optional double x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // optional double y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // optional double w = 5;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 5;
  double w() const;
  void set_w(double value);

  // optional double h = 6;
  bool has_h() const;
  void clear_h();
  static const int kHFieldNumber = 6;
  double h() const;
  void set_h(double value);

  // @@protoc_insertion_point(class_scope:CameraGroup)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 camera_id_;
  double x_;
  double y_;
  double w_;
  double h_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class PageInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PageInfo) */ {
 public:
  PageInfo();
  virtual ~PageInfo();

  PageInfo(const PageInfo& from);

  inline PageInfo& operator=(const PageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PageInfo(PageInfo&& from) noexcept
    : PageInfo() {
    *this = ::std::move(from);
  }

  inline PageInfo& operator=(PageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageInfo* internal_default_instance() {
    return reinterpret_cast<const PageInfo*>(
               &_PageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PageInfo* other);
  friend void swap(PageInfo& a, PageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PageInfo* New() const final {
    return CreateMaybeMessage<PageInfo>(nullptr);
  }

  PageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PageInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PageInfo& from);
  void MergeFrom(const PageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 page_size = 1;
  bool has_page_size() const;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::uint32 page_size() const;
  void set_page_size(::google::protobuf::uint32 value);

  // optional uint32 page_number = 2;
  bool has_page_number() const;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::uint32 page_number() const;
  void set_page_number(::google::protobuf::uint32 value);

  // optional uint32 total_pages = 3;
  bool has_total_pages() const;
  void clear_total_pages();
  static const int kTotalPagesFieldNumber = 3;
  ::google::protobuf::uint32 total_pages() const;
  void set_total_pages(::google::protobuf::uint32 value);

  // optional uint32 total_elements = 4;
  bool has_total_elements() const;
  void clear_total_elements();
  static const int kTotalElementsFieldNumber = 4;
  ::google::protobuf::uint32 total_elements() const;
  void set_total_elements(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PageInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 page_size_;
  ::google::protobuf::uint32 page_number_;
  ::google::protobuf::uint32 total_pages_;
  ::google::protobuf::uint32 total_elements_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class OsdInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:OsdInfo) */ {
 public:
  OsdInfo();
  virtual ~OsdInfo();

  OsdInfo(const OsdInfo& from);

  inline OsdInfo& operator=(const OsdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OsdInfo(OsdInfo&& from) noexcept
    : OsdInfo() {
    *this = ::std::move(from);
  }

  inline OsdInfo& operator=(OsdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OsdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OsdInfo* internal_default_instance() {
    return reinterpret_cast<const OsdInfo*>(
               &_OsdInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OsdInfo* other);
  friend void swap(OsdInfo& a, OsdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OsdInfo* New() const final {
    return CreateMaybeMessage<OsdInfo>(nullptr);
  }

  OsdInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OsdInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OsdInfo& from);
  void MergeFrom(const OsdInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OsdInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string font_text = 4;
  bool has_font_text() const;
  void clear_font_text();
  static const int kFontTextFieldNumber = 4;
  const ::std::string& font_text() const;
  void set_font_text(const ::std::string& value);
  #if LANG_CXX11
  void set_font_text(::std::string&& value);
  #endif
  void set_font_text(const char* value);
  void set_font_text(const char* value, size_t size);
  ::std::string* mutable_font_text();
  ::std::string* release_font_text();
  void set_allocated_font_text(::std::string* font_text);

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional uint32 font_size = 3;
  bool has_font_size() const;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 3;
  ::google::protobuf::uint32 font_size() const;
  void set_font_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OsdInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr font_text_;
  double x_;
  double y_;
  ::google::protobuf::uint32 font_size_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo

// optional uint32 index = 1;
inline bool CameraInfo::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraInfo::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CameraInfo::index() const {
  // @@protoc_insertion_point(field_get:CameraInfo.index)
  return index_;
}
inline void CameraInfo::set_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.index)
}

// optional uint32 camera_id = 2;
inline bool CameraInfo::has_camera_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraInfo::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CameraInfo::camera_id() const {
  // @@protoc_insertion_point(field_get:CameraInfo.camera_id)
  return camera_id_;
}
inline void CameraInfo::set_camera_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.camera_id)
}

// optional string camera_name = 3;
inline bool CameraInfo::has_camera_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraInfo::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CameraInfo::camera_name() const {
  // @@protoc_insertion_point(field_get:CameraInfo.camera_name)
  return camera_name_.GetNoArena();
}
inline void CameraInfo::set_camera_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.camera_name)
}
#if LANG_CXX11
inline void CameraInfo::set_camera_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.camera_name)
}
#endif
inline void CameraInfo::set_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.camera_name)
}
inline void CameraInfo::set_camera_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.camera_name)
}
inline ::std::string* CameraInfo::mutable_camera_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_camera_name() {
  // @@protoc_insertion_point(field_release:CameraInfo.camera_name)
  if (!has_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.camera_name)
}

// optional string ip = 4;
inline bool CameraInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CameraInfo::ip() const {
  // @@protoc_insertion_point(field_get:CameraInfo.ip)
  return ip_.GetNoArena();
}
inline void CameraInfo::set_ip(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.ip)
}
#if LANG_CXX11
inline void CameraInfo::set_ip(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.ip)
}
#endif
inline void CameraInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.ip)
}
inline void CameraInfo::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.ip)
}
inline ::std::string* CameraInfo::mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_ip() {
  // @@protoc_insertion_point(field_release:CameraInfo.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.ip)
}

// optional string address = 5;
inline bool CameraInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CameraInfo::address() const {
  // @@protoc_insertion_point(field_get:CameraInfo.address)
  return address_.GetNoArena();
}
inline void CameraInfo::set_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.address)
}
#if LANG_CXX11
inline void CameraInfo::set_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.address)
}
#endif
inline void CameraInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.address)
}
inline void CameraInfo::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.address)
}
inline ::std::string* CameraInfo::mutable_address() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_address() {
  // @@protoc_insertion_point(field_release:CameraInfo.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.address)
}

// optional uint32 port = 6;
inline bool CameraInfo::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraInfo::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CameraInfo::port() const {
  // @@protoc_insertion_point(field_get:CameraInfo.port)
  return port_;
}
inline void CameraInfo::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  port_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.port)
}

// optional string url = 7;
inline bool CameraInfo::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CameraInfo::url() const {
  // @@protoc_insertion_point(field_get:CameraInfo.url)
  return url_.GetNoArena();
}
inline void CameraInfo::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.url)
}
#if LANG_CXX11
inline void CameraInfo::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.url)
}
#endif
inline void CameraInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.url)
}
inline void CameraInfo::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.url)
}
inline ::std::string* CameraInfo::mutable_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_url() {
  // @@protoc_insertion_point(field_release:CameraInfo.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.url)
}

// optional .ECameraStatusType state = 8;
inline bool CameraInfo::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraInfo::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::ECameraStatusType CameraInfo::state() const {
  // @@protoc_insertion_point(field_get:CameraInfo.state)
  return static_cast< ::ECameraStatusType >(state_);
}
inline void CameraInfo::set_state(::ECameraStatusType value) {
  assert(::ECameraStatusType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  state_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.state)
}

// -------------------------------------------------------------------

// CameraGroup

// optional uint32 index = 1;
inline bool CameraGroup::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraGroup::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CameraGroup::index() const {
  // @@protoc_insertion_point(field_get:CameraGroup.index)
  return index_;
}
inline void CameraGroup::set_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.index)
}

// optional uint32 camera_id = 2;
inline bool CameraGroup::has_camera_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraGroup::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CameraGroup::camera_id() const {
  // @@protoc_insertion_point(field_get:CameraGroup.camera_id)
  return camera_id_;
}
inline void CameraGroup::set_camera_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.camera_id)
}

// optional double x = 3;
inline bool CameraGroup::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraGroup::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CameraGroup::x() const {
  // @@protoc_insertion_point(field_get:CameraGroup.x)
  return x_;
}
inline void CameraGroup::set_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.x)
}

// optional double y = 4;
inline bool CameraGroup::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraGroup::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CameraGroup::y() const {
  // @@protoc_insertion_point(field_get:CameraGroup.y)
  return y_;
}
inline void CameraGroup::set_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.y)
}

// optional double w = 5;
inline bool CameraGroup::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraGroup::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CameraGroup::w() const {
  // @@protoc_insertion_point(field_get:CameraGroup.w)
  return w_;
}
inline void CameraGroup::set_w(double value) {
  _has_bits_[0] |= 0x00000010u;
  w_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.w)
}

// optional double h = 6;
inline bool CameraGroup::has_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraGroup::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CameraGroup::h() const {
  // @@protoc_insertion_point(field_get:CameraGroup.h)
  return h_;
}
inline void CameraGroup::set_h(double value) {
  _has_bits_[0] |= 0x00000020u;
  h_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.h)
}

// -------------------------------------------------------------------

// PageInfo

// optional uint32 page_size = 1;
inline bool PageInfo::has_page_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageInfo::clear_page_size() {
  page_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 PageInfo::page_size() const {
  // @@protoc_insertion_point(field_get:PageInfo.page_size)
  return page_size_;
}
inline void PageInfo::set_page_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  page_size_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.page_size)
}

// optional uint32 page_number = 2;
inline bool PageInfo::has_page_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageInfo::clear_page_number() {
  page_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 PageInfo::page_number() const {
  // @@protoc_insertion_point(field_get:PageInfo.page_number)
  return page_number_;
}
inline void PageInfo::set_page_number(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_number_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.page_number)
}

// optional uint32 total_pages = 3;
inline bool PageInfo::has_total_pages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageInfo::clear_total_pages() {
  total_pages_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 PageInfo::total_pages() const {
  // @@protoc_insertion_point(field_get:PageInfo.total_pages)
  return total_pages_;
}
inline void PageInfo::set_total_pages(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  total_pages_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.total_pages)
}

// optional uint32 total_elements = 4;
inline bool PageInfo::has_total_elements() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageInfo::clear_total_elements() {
  total_elements_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 PageInfo::total_elements() const {
  // @@protoc_insertion_point(field_get:PageInfo.total_elements)
  return total_elements_;
}
inline void PageInfo::set_total_elements(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  total_elements_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.total_elements)
}

// -------------------------------------------------------------------

// OsdInfo

// optional double x = 1;
inline bool OsdInfo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OsdInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double OsdInfo::x() const {
  // @@protoc_insertion_point(field_get:OsdInfo.x)
  return x_;
}
inline void OsdInfo::set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:OsdInfo.x)
}

// optional double y = 2;
inline bool OsdInfo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OsdInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OsdInfo::y() const {
  // @@protoc_insertion_point(field_get:OsdInfo.y)
  return y_;
}
inline void OsdInfo::set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:OsdInfo.y)
}

// optional uint32 font_size = 3;
inline bool OsdInfo::has_font_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OsdInfo::clear_font_size() {
  font_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 OsdInfo::font_size() const {
  // @@protoc_insertion_point(field_get:OsdInfo.font_size)
  return font_size_;
}
inline void OsdInfo::set_font_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  font_size_ = value;
  // @@protoc_insertion_point(field_set:OsdInfo.font_size)
}

// optional string font_text = 4;
inline bool OsdInfo::has_font_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OsdInfo::clear_font_text() {
  font_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& OsdInfo::font_text() const {
  // @@protoc_insertion_point(field_get:OsdInfo.font_text)
  return font_text_.GetNoArena();
}
inline void OsdInfo::set_font_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OsdInfo.font_text)
}
#if LANG_CXX11
inline void OsdInfo::set_font_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  font_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OsdInfo.font_text)
}
#endif
inline void OsdInfo::set_font_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  font_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OsdInfo.font_text)
}
inline void OsdInfo::set_font_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  font_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OsdInfo.font_text)
}
inline ::std::string* OsdInfo::mutable_font_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:OsdInfo.font_text)
  return font_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OsdInfo::release_font_text() {
  // @@protoc_insertion_point(field_release:OsdInfo.font_text)
  if (!has_font_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return font_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OsdInfo::set_allocated_font_text(::std::string* font_text) {
  if (font_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_text);
  // @@protoc_insertion_point(field_set_allocated:OsdInfo.font_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_VideoSplitDefine_2eproto
