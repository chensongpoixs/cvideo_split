// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoSplitDefine.proto

#ifndef PROTOBUF_INCLUDED_VideoSplitDefine_2eproto
#define PROTOBUF_INCLUDED_VideoSplitDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "EnumDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VideoSplitDefine_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_VideoSplitDefine_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class CameraGroup;
class CameraGroupDefaultTypeInternal;
extern CameraGroupDefaultTypeInternal _CameraGroup_default_instance_;
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class PageInfo;
class PageInfoDefaultTypeInternal;
extern PageInfoDefaultTypeInternal _PageInfo_default_instance_;
class VideoSplitInfo;
class VideoSplitInfoDefaultTypeInternal;
extern VideoSplitInfoDefaultTypeInternal _VideoSplitInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::CameraGroup* Arena::CreateMaybeMessage<::CameraGroup>(Arena*);
template<> ::CameraInfo* Arena::CreateMaybeMessage<::CameraInfo>(Arena*);
template<> ::PageInfo* Arena::CreateMaybeMessage<::PageInfo>(Arena*);
template<> ::VideoSplitInfo* Arena::CreateMaybeMessage<::VideoSplitInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CameraInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(nullptr);
  }

  CameraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string camera_name = 4;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 4;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  #if LANG_CXX11
  void set_camera_name(::std::string&& value);
  #endif
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // optional string url = 6;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional uint32 camera_id = 2;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 2;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // optional uint32 port = 5;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional .ECameraStatusType state = 7;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::ECameraStatusType state() const;
  void set_state(::ECameraStatusType value);

  // @@protoc_insertion_point(class_scope:CameraInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 camera_id_;
  ::google::protobuf::uint32 port_;
  int state_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class CameraGroup final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CameraGroup) */ {
 public:
  CameraGroup();
  virtual ~CameraGroup();

  CameraGroup(const CameraGroup& from);

  inline CameraGroup& operator=(const CameraGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraGroup(CameraGroup&& from) noexcept
    : CameraGroup() {
    *this = ::std::move(from);
  }

  inline CameraGroup& operator=(CameraGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CameraGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraGroup* internal_default_instance() {
    return reinterpret_cast<const CameraGroup*>(
               &_CameraGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraGroup* other);
  friend void swap(CameraGroup& a, CameraGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraGroup* New() const final {
    return CreateMaybeMessage<CameraGroup>(nullptr);
  }

  CameraGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CameraGroup& from);
  void MergeFrom(const CameraGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional uint32 camera_id = 2;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 2;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CameraGroup)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 camera_id_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class VideoSplitInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:VideoSplitInfo) */ {
 public:
  VideoSplitInfo();
  virtual ~VideoSplitInfo();

  VideoSplitInfo(const VideoSplitInfo& from);

  inline VideoSplitInfo& operator=(const VideoSplitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoSplitInfo(VideoSplitInfo&& from) noexcept
    : VideoSplitInfo() {
    *this = ::std::move(from);
  }

  inline VideoSplitInfo& operator=(VideoSplitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoSplitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSplitInfo* internal_default_instance() {
    return reinterpret_cast<const VideoSplitInfo*>(
               &_VideoSplitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VideoSplitInfo* other);
  friend void swap(VideoSplitInfo& a, VideoSplitInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoSplitInfo* New() const final {
    return CreateMaybeMessage<VideoSplitInfo>(nullptr);
  }

  VideoSplitInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoSplitInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VideoSplitInfo& from);
  void MergeFrom(const VideoSplitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSplitInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CameraInfo camera_infos = 10;
  int camera_infos_size() const;
  void clear_camera_infos();
  static const int kCameraInfosFieldNumber = 10;
  ::CameraInfo* mutable_camera_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::CameraInfo >*
      mutable_camera_infos();
  const ::CameraInfo& camera_infos(int index) const;
  ::CameraInfo* add_camera_infos();
  const ::google::protobuf::RepeatedPtrField< ::CameraInfo >&
      camera_infos() const;

  // optional string split_channel_name = 2;
  bool has_split_channel_name() const;
  void clear_split_channel_name();
  static const int kSplitChannelNameFieldNumber = 2;
  const ::std::string& split_channel_name() const;
  void set_split_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_split_channel_name(::std::string&& value);
  #endif
  void set_split_channel_name(const char* value);
  void set_split_channel_name(const char* value, size_t size);
  ::std::string* mutable_split_channel_name();
  ::std::string* release_split_channel_name();
  void set_allocated_split_channel_name(::std::string* split_channel_name);

  // optional string split_channel_id = 3;
  bool has_split_channel_id() const;
  void clear_split_channel_id();
  static const int kSplitChannelIdFieldNumber = 3;
  const ::std::string& split_channel_id() const;
  void set_split_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_split_channel_id(::std::string&& value);
  #endif
  void set_split_channel_id(const char* value);
  void set_split_channel_id(const char* value, size_t size);
  ::std::string* mutable_split_channel_id();
  ::std::string* release_split_channel_id();
  void set_allocated_split_channel_id(::std::string* split_channel_id);

  // optional string multicast_ip = 4;
  bool has_multicast_ip() const;
  void clear_multicast_ip();
  static const int kMulticastIpFieldNumber = 4;
  const ::std::string& multicast_ip() const;
  void set_multicast_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_multicast_ip(::std::string&& value);
  #endif
  void set_multicast_ip(const char* value);
  void set_multicast_ip(const char* value, size_t size);
  ::std::string* mutable_multicast_ip();
  ::std::string* release_multicast_ip();
  void set_allocated_multicast_ip(::std::string* multicast_ip);

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 multicast_port = 5;
  bool has_multicast_port() const;
  void clear_multicast_port();
  static const int kMulticastPortFieldNumber = 5;
  ::google::protobuf::uint32 multicast_port() const;
  void set_multicast_port(::google::protobuf::uint32 value);

  // optional .ESplitMethod split_method = 6;
  bool has_split_method() const;
  void clear_split_method();
  static const int kSplitMethodFieldNumber = 6;
  ::ESplitMethod split_method() const;
  void set_split_method(::ESplitMethod value);

  // optional uint32 lock_1080p = 8;
  bool has_lock_1080p() const;
  void clear_lock_1080p();
  static const int kLock1080PFieldNumber = 8;
  ::google::protobuf::uint32 lock_1080p() const;
  void set_lock_1080p(::google::protobuf::uint32 value);

  // optional uint32 overlay = 9;
  bool has_overlay() const;
  void clear_overlay();
  static const int kOverlayFieldNumber = 9;
  ::google::protobuf::uint32 overlay() const;
  void set_overlay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:VideoSplitInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CameraInfo > camera_infos_;
  ::google::protobuf::internal::ArenaStringPtr split_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr split_channel_id_;
  ::google::protobuf::internal::ArenaStringPtr multicast_ip_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 multicast_port_;
  int split_method_;
  ::google::protobuf::uint32 lock_1080p_;
  ::google::protobuf::uint32 overlay_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// -------------------------------------------------------------------

class PageInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PageInfo) */ {
 public:
  PageInfo();
  virtual ~PageInfo();

  PageInfo(const PageInfo& from);

  inline PageInfo& operator=(const PageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PageInfo(PageInfo&& from) noexcept
    : PageInfo() {
    *this = ::std::move(from);
  }

  inline PageInfo& operator=(PageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageInfo* internal_default_instance() {
    return reinterpret_cast<const PageInfo*>(
               &_PageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PageInfo* other);
  friend void swap(PageInfo& a, PageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PageInfo* New() const final {
    return CreateMaybeMessage<PageInfo>(nullptr);
  }

  PageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PageInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PageInfo& from);
  void MergeFrom(const PageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 page_size = 1;
  bool has_page_size() const;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::uint32 page_size() const;
  void set_page_size(::google::protobuf::uint32 value);

  // optional uint32 page_number = 2;
  bool has_page_number() const;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::uint32 page_number() const;
  void set_page_number(::google::protobuf::uint32 value);

  // optional uint32 total_pages = 3;
  bool has_total_pages() const;
  void clear_total_pages();
  static const int kTotalPagesFieldNumber = 3;
  ::google::protobuf::uint32 total_pages() const;
  void set_total_pages(::google::protobuf::uint32 value);

  // optional uint32 total_elements = 4;
  bool has_total_elements() const;
  void clear_total_elements();
  static const int kTotalElementsFieldNumber = 4;
  ::google::protobuf::uint32 total_elements() const;
  void set_total_elements(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PageInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 page_size_;
  ::google::protobuf::uint32 page_number_;
  ::google::protobuf::uint32 total_pages_;
  ::google::protobuf::uint32 total_elements_;
  friend struct ::TableStruct_VideoSplitDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo

// optional uint32 index = 1;
inline bool CameraInfo::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraInfo::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CameraInfo::index() const {
  // @@protoc_insertion_point(field_get:CameraInfo.index)
  return index_;
}
inline void CameraInfo::set_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.index)
}

// optional uint32 camera_id = 2;
inline bool CameraInfo::has_camera_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraInfo::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CameraInfo::camera_id() const {
  // @@protoc_insertion_point(field_get:CameraInfo.camera_id)
  return camera_id_;
}
inline void CameraInfo::set_camera_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.camera_id)
}

// optional string address = 3;
inline bool CameraInfo::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CameraInfo::address() const {
  // @@protoc_insertion_point(field_get:CameraInfo.address)
  return address_.GetNoArena();
}
inline void CameraInfo::set_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.address)
}
#if LANG_CXX11
inline void CameraInfo::set_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.address)
}
#endif
inline void CameraInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.address)
}
inline void CameraInfo::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.address)
}
inline ::std::string* CameraInfo::mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_address() {
  // @@protoc_insertion_point(field_release:CameraInfo.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.address)
}

// optional string camera_name = 4;
inline bool CameraInfo::has_camera_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraInfo::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CameraInfo::camera_name() const {
  // @@protoc_insertion_point(field_get:CameraInfo.camera_name)
  return camera_name_.GetNoArena();
}
inline void CameraInfo::set_camera_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.camera_name)
}
#if LANG_CXX11
inline void CameraInfo::set_camera_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.camera_name)
}
#endif
inline void CameraInfo::set_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.camera_name)
}
inline void CameraInfo::set_camera_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.camera_name)
}
inline ::std::string* CameraInfo::mutable_camera_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_camera_name() {
  // @@protoc_insertion_point(field_release:CameraInfo.camera_name)
  if (!has_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return camera_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.camera_name)
}

// optional uint32 port = 5;
inline bool CameraInfo::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraInfo::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CameraInfo::port() const {
  // @@protoc_insertion_point(field_get:CameraInfo.port)
  return port_;
}
inline void CameraInfo::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  port_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.port)
}

// optional string url = 6;
inline bool CameraInfo::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CameraInfo::url() const {
  // @@protoc_insertion_point(field_get:CameraInfo.url)
  return url_.GetNoArena();
}
inline void CameraInfo::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraInfo.url)
}
#if LANG_CXX11
inline void CameraInfo::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraInfo.url)
}
#endif
inline void CameraInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraInfo.url)
}
inline void CameraInfo::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraInfo.url)
}
inline ::std::string* CameraInfo::mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:CameraInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_url() {
  // @@protoc_insertion_point(field_release:CameraInfo.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CameraInfo.url)
}

// optional .ECameraStatusType state = 7;
inline bool CameraInfo::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraInfo::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ECameraStatusType CameraInfo::state() const {
  // @@protoc_insertion_point(field_get:CameraInfo.state)
  return static_cast< ::ECameraStatusType >(state_);
}
inline void CameraInfo::set_state(::ECameraStatusType value) {
  assert(::ECameraStatusType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  state_ = value;
  // @@protoc_insertion_point(field_set:CameraInfo.state)
}

// -------------------------------------------------------------------

// CameraGroup

// optional uint32 index = 1;
inline bool CameraGroup::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraGroup::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CameraGroup::index() const {
  // @@protoc_insertion_point(field_get:CameraGroup.index)
  return index_;
}
inline void CameraGroup::set_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.index)
}

// optional uint32 camera_id = 2;
inline bool CameraGroup::has_camera_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraGroup::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CameraGroup::camera_id() const {
  // @@protoc_insertion_point(field_get:CameraGroup.camera_id)
  return camera_id_;
}
inline void CameraGroup::set_camera_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:CameraGroup.camera_id)
}

// -------------------------------------------------------------------

// VideoSplitInfo

// optional uint64 id = 1;
inline bool VideoSplitInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoSplitInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 VideoSplitInfo::id() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.id)
  return id_;
}
inline void VideoSplitInfo::set_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:VideoSplitInfo.id)
}

// optional string split_channel_name = 2;
inline bool VideoSplitInfo::has_split_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoSplitInfo::clear_split_channel_name() {
  split_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& VideoSplitInfo::split_channel_name() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.split_channel_name)
  return split_channel_name_.GetNoArena();
}
inline void VideoSplitInfo::set_split_channel_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  split_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoSplitInfo.split_channel_name)
}
#if LANG_CXX11
inline void VideoSplitInfo::set_split_channel_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  split_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoSplitInfo.split_channel_name)
}
#endif
inline void VideoSplitInfo::set_split_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  split_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoSplitInfo.split_channel_name)
}
inline void VideoSplitInfo::set_split_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  split_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoSplitInfo.split_channel_name)
}
inline ::std::string* VideoSplitInfo::mutable_split_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:VideoSplitInfo.split_channel_name)
  return split_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoSplitInfo::release_split_channel_name() {
  // @@protoc_insertion_point(field_release:VideoSplitInfo.split_channel_name)
  if (!has_split_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return split_channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoSplitInfo::set_allocated_split_channel_name(::std::string* split_channel_name) {
  if (split_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  split_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_channel_name);
  // @@protoc_insertion_point(field_set_allocated:VideoSplitInfo.split_channel_name)
}

// optional string split_channel_id = 3;
inline bool VideoSplitInfo::has_split_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoSplitInfo::clear_split_channel_id() {
  split_channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& VideoSplitInfo::split_channel_id() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.split_channel_id)
  return split_channel_id_.GetNoArena();
}
inline void VideoSplitInfo::set_split_channel_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  split_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoSplitInfo.split_channel_id)
}
#if LANG_CXX11
inline void VideoSplitInfo::set_split_channel_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  split_channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoSplitInfo.split_channel_id)
}
#endif
inline void VideoSplitInfo::set_split_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  split_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoSplitInfo.split_channel_id)
}
inline void VideoSplitInfo::set_split_channel_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  split_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoSplitInfo.split_channel_id)
}
inline ::std::string* VideoSplitInfo::mutable_split_channel_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:VideoSplitInfo.split_channel_id)
  return split_channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoSplitInfo::release_split_channel_id() {
  // @@protoc_insertion_point(field_release:VideoSplitInfo.split_channel_id)
  if (!has_split_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return split_channel_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoSplitInfo::set_allocated_split_channel_id(::std::string* split_channel_id) {
  if (split_channel_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  split_channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_channel_id);
  // @@protoc_insertion_point(field_set_allocated:VideoSplitInfo.split_channel_id)
}

// optional string multicast_ip = 4;
inline bool VideoSplitInfo::has_multicast_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoSplitInfo::clear_multicast_ip() {
  multicast_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& VideoSplitInfo::multicast_ip() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.multicast_ip)
  return multicast_ip_.GetNoArena();
}
inline void VideoSplitInfo::set_multicast_ip(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  multicast_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoSplitInfo.multicast_ip)
}
#if LANG_CXX11
inline void VideoSplitInfo::set_multicast_ip(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  multicast_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoSplitInfo.multicast_ip)
}
#endif
inline void VideoSplitInfo::set_multicast_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  multicast_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoSplitInfo.multicast_ip)
}
inline void VideoSplitInfo::set_multicast_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  multicast_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoSplitInfo.multicast_ip)
}
inline ::std::string* VideoSplitInfo::mutable_multicast_ip() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:VideoSplitInfo.multicast_ip)
  return multicast_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoSplitInfo::release_multicast_ip() {
  // @@protoc_insertion_point(field_release:VideoSplitInfo.multicast_ip)
  if (!has_multicast_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return multicast_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoSplitInfo::set_allocated_multicast_ip(::std::string* multicast_ip) {
  if (multicast_ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  multicast_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multicast_ip);
  // @@protoc_insertion_point(field_set_allocated:VideoSplitInfo.multicast_ip)
}

// optional uint32 multicast_port = 5;
inline bool VideoSplitInfo::has_multicast_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoSplitInfo::clear_multicast_port() {
  multicast_port_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 VideoSplitInfo::multicast_port() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.multicast_port)
  return multicast_port_;
}
inline void VideoSplitInfo::set_multicast_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  multicast_port_ = value;
  // @@protoc_insertion_point(field_set:VideoSplitInfo.multicast_port)
}

// optional .ESplitMethod split_method = 6;
inline bool VideoSplitInfo::has_split_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoSplitInfo::clear_split_method() {
  split_method_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ESplitMethod VideoSplitInfo::split_method() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.split_method)
  return static_cast< ::ESplitMethod >(split_method_);
}
inline void VideoSplitInfo::set_split_method(::ESplitMethod value) {
  assert(::ESplitMethod_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  split_method_ = value;
  // @@protoc_insertion_point(field_set:VideoSplitInfo.split_method)
}

// optional uint32 lock_1080p = 8;
inline bool VideoSplitInfo::has_lock_1080p() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoSplitInfo::clear_lock_1080p() {
  lock_1080p_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 VideoSplitInfo::lock_1080p() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.lock_1080p)
  return lock_1080p_;
}
inline void VideoSplitInfo::set_lock_1080p(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  lock_1080p_ = value;
  // @@protoc_insertion_point(field_set:VideoSplitInfo.lock_1080p)
}

// optional uint32 overlay = 9;
inline bool VideoSplitInfo::has_overlay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoSplitInfo::clear_overlay() {
  overlay_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 VideoSplitInfo::overlay() const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.overlay)
  return overlay_;
}
inline void VideoSplitInfo::set_overlay(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  overlay_ = value;
  // @@protoc_insertion_point(field_set:VideoSplitInfo.overlay)
}

// repeated .CameraInfo camera_infos = 10;
inline int VideoSplitInfo::camera_infos_size() const {
  return camera_infos_.size();
}
inline void VideoSplitInfo::clear_camera_infos() {
  camera_infos_.Clear();
}
inline ::CameraInfo* VideoSplitInfo::mutable_camera_infos(int index) {
  // @@protoc_insertion_point(field_mutable:VideoSplitInfo.camera_infos)
  return camera_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CameraInfo >*
VideoSplitInfo::mutable_camera_infos() {
  // @@protoc_insertion_point(field_mutable_list:VideoSplitInfo.camera_infos)
  return &camera_infos_;
}
inline const ::CameraInfo& VideoSplitInfo::camera_infos(int index) const {
  // @@protoc_insertion_point(field_get:VideoSplitInfo.camera_infos)
  return camera_infos_.Get(index);
}
inline ::CameraInfo* VideoSplitInfo::add_camera_infos() {
  // @@protoc_insertion_point(field_add:VideoSplitInfo.camera_infos)
  return camera_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CameraInfo >&
VideoSplitInfo::camera_infos() const {
  // @@protoc_insertion_point(field_list:VideoSplitInfo.camera_infos)
  return camera_infos_;
}

// -------------------------------------------------------------------

// PageInfo

// optional uint32 page_size = 1;
inline bool PageInfo::has_page_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageInfo::clear_page_size() {
  page_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 PageInfo::page_size() const {
  // @@protoc_insertion_point(field_get:PageInfo.page_size)
  return page_size_;
}
inline void PageInfo::set_page_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  page_size_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.page_size)
}

// optional uint32 page_number = 2;
inline bool PageInfo::has_page_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageInfo::clear_page_number() {
  page_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 PageInfo::page_number() const {
  // @@protoc_insertion_point(field_get:PageInfo.page_number)
  return page_number_;
}
inline void PageInfo::set_page_number(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_number_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.page_number)
}

// optional uint32 total_pages = 3;
inline bool PageInfo::has_total_pages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageInfo::clear_total_pages() {
  total_pages_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 PageInfo::total_pages() const {
  // @@protoc_insertion_point(field_get:PageInfo.total_pages)
  return total_pages_;
}
inline void PageInfo::set_total_pages(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  total_pages_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.total_pages)
}

// optional uint32 total_elements = 4;
inline bool PageInfo::has_total_elements() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageInfo::clear_total_elements() {
  total_elements_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 PageInfo::total_elements() const {
  // @@protoc_insertion_point(field_get:PageInfo.total_elements)
  return total_elements_;
}
inline void PageInfo::set_total_elements(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  total_elements_ = value;
  // @@protoc_insertion_point(field_set:PageInfo.total_elements)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_VideoSplitDefine_2eproto
